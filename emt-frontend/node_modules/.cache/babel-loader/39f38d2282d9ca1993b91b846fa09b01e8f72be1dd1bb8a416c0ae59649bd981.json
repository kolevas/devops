{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport userRepository from \"../repository/userRepository\";\nimport { useNavigate } from \"react-router-dom\";\nconst useUsers = () => {\n  _s();\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [loginState, setLoginState] = useState(false);\n  const navigate = useNavigate();\n  const checkAuth = () => {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      const user = JSON.parse(atob(token.split(\".\")[1]));\n      setLoggedInUser(user);\n      setLoginState(true);\n    } else {\n      setLoggedInUser(null);\n      setLoginState(false);\n    }\n  };\n  useEffect(() => {\n    checkAuth();\n    const handleStorageChange = event => {\n      if (event.key === \"jwtToken\") {\n        checkAuth();\n      }\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, []);\n  const login = useCallback((username, password) => {\n    userRepository.login(username, password).then(() => {\n      checkAuth(); // Check authentication after login\n      navigate(\"/\", {\n        replace: true\n      });\n    }).catch(error => console.log(error));\n  }, [navigate]);\n  const logout = () => {\n    userRepository.logout();\n    localStorage.removeItem(\"jwtToken\");\n    checkAuth();\n    navigate(\"/user/login\", {\n      replace: true\n    });\n  };\n  return {\n    loggedInUser,\n    login,\n    logout,\n    loginState\n  };\n};\n_s(useUsers, \"dSzj40Tp6BtcVVK6wxjamgDhajk=\", false, function () {\n  return [useNavigate];\n});\nexport default useUsers;","map":{"version":3,"names":["useCallback","useEffect","useState","userRepository","useNavigate","useUsers","_s","loggedInUser","setLoggedInUser","loginState","setLoginState","navigate","checkAuth","token","localStorage","getItem","user","JSON","parse","atob","split","handleStorageChange","event","key","window","addEventListener","removeEventListener","login","username","password","then","replace","catch","error","console","log","logout","removeItem"],"sources":["/Users/snezhanakoleva/IdeaProjects/EMT/emt-frontend/src/hooks/useUsers.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport userRepository from \"../repository/userRepository\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst useUsers = () => {\n    const [loggedInUser, setLoggedInUser] = useState(null);\n    const [loginState, setLoginState] = useState(false);\n    const navigate = useNavigate();\n\n    const checkAuth = () => {\n        const token = localStorage.getItem(\"jwtToken\");\n        if (token) {\n            const user = JSON.parse(atob(token.split(\".\")[1]));\n            setLoggedInUser(user);\n            setLoginState(true);\n        } else {\n            setLoggedInUser(null);\n            setLoginState(false);\n        }\n    };\n\n    useEffect(() => {\n        checkAuth();\n\n        const handleStorageChange = (event) => {\n            if (event.key === \"jwtToken\") {\n                checkAuth();\n            }\n        };\n\n        window.addEventListener(\"storage\", handleStorageChange);\n\n        return () => {\n            window.removeEventListener(\"storage\", handleStorageChange);\n        };\n    }, []);\n\n    const login = useCallback((username, password) => {\n        userRepository\n            .login(username, password)\n            .then(() => {\n                checkAuth();  // Check authentication after login\n                navigate(\"/\", { replace: true });\n            })\n            .catch((error) => console.log(error));\n    }, [navigate]);\n\n    const logout = () => {\n        userRepository.logout();\n        localStorage.removeItem(\"jwtToken\");\n        checkAuth();\n        navigate(\"/user/login\", { replace: true });\n    };\n\n    return {\n        loggedInUser,\n        login,\n        logout,\n        loginState,\n    };\n};\n\nexport default useUsers;\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,IAAIF,KAAK,EAAE;MACP,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClDZ,eAAe,CAACQ,IAAI,CAAC;MACrBN,aAAa,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACHF,eAAe,CAAC,IAAI,CAAC;MACrBE,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAEDT,SAAS,CAAC,MAAM;IACZW,SAAS,CAAC,CAAC;IAEX,MAAMS,mBAAmB,GAAIC,KAAK,IAAK;MACnC,IAAIA,KAAK,CAACC,GAAG,KAAK,UAAU,EAAE;QAC1BX,SAAS,CAAC,CAAC;MACf;IACJ,CAAC;IAEDY,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,mBAAmB,CAAC;IAEvD,OAAO,MAAM;MACTG,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEL,mBAAmB,CAAC;IAC9D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG3B,WAAW,CAAC,CAAC4B,QAAQ,EAAEC,QAAQ,KAAK;IAC9C1B,cAAc,CACTwB,KAAK,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CACzBC,IAAI,CAAC,MAAM;MACRlB,SAAS,CAAC,CAAC,CAAC,CAAE;MACdD,QAAQ,CAAC,GAAG,EAAE;QAAEoB,OAAO,EAAE;MAAK,CAAC,CAAC;IACpC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACtB,QAAQ,CAAC,CAAC;EAEd,MAAMyB,MAAM,GAAGA,CAAA,KAAM;IACjBjC,cAAc,CAACiC,MAAM,CAAC,CAAC;IACvBtB,YAAY,CAACuB,UAAU,CAAC,UAAU,CAAC;IACnCzB,SAAS,CAAC,CAAC;IACXD,QAAQ,CAAC,aAAa,EAAE;MAAEoB,OAAO,EAAE;IAAK,CAAC,CAAC;EAC9C,CAAC;EAED,OAAO;IACHxB,YAAY;IACZoB,KAAK;IACLS,MAAM;IACN3B;EACJ,CAAC;AACL,CAAC;AAACH,EAAA,CAxDID,QAAQ;EAAA,QAGOD,WAAW;AAAA;AAuDhC,eAAeC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}