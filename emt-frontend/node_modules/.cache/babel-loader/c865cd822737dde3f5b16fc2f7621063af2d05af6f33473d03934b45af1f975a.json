{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport countriesRepository from \"../repository/countriesRepository\";\nconst useCountryDetails = id => {\n  _s();\n  const [state, setState] = useState({\n    \"country\": null\n  });\n  useEffect(() => {\n    countriesRepository.findById(id).then(response => {\n      setState(prevState => ({\n        ...prevState,\n        \"country\": response.data\n      }));\n    }).catch(error => console.log(error));\n  }, [id]);\n  return state;\n};\n_s(useCountryDetails, \"TVXjoHpyHSaYe7Bet1w/UGDP8yQ=\");\nexport default useCountryDetails;","map":{"version":3,"names":["useEffect","useState","countriesRepository","useCountryDetails","id","_s","state","setState","findById","then","response","prevState","data","catch","error","console","log"],"sources":["/Users/snezhanakoleva/IdeaProjects/EMT/emt-frontend/src/hooks/useCountryDetails.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\nimport countriesRepository from \"../repository/countriesRepository\";\n\nconst useCountryDetails = (id) => {\n    const [state, setState] = useState({\n        \"country\": null,\n    });\n    useEffect(() => {\n        countriesRepository\n            .findById(id)\n            .then((response) => {\n                setState(prevState => ({...prevState, \"country\": response.data}));\n            })\n            .catch((error) => console.log(error));\n    }, [id]);\n\n    return state;\n};\n\nexport default useCountryDetails;\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAOC,mBAAmB,MAAM,mCAAmC;AAEnE,MAAMC,iBAAiB,GAAIC,EAAE,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC;IAC/B,SAAS,EAAE;EACf,CAAC,CAAC;EACFD,SAAS,CAAC,MAAM;IACZE,mBAAmB,CACdM,QAAQ,CAACJ,EAAE,CAAC,CACZK,IAAI,CAAEC,QAAQ,IAAK;MAChBH,QAAQ,CAACI,SAAS,KAAK;QAAC,GAAGA,SAAS;QAAE,SAAS,EAAED,QAAQ,CAACE;MAAI,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACV,EAAE,CAAC,CAAC;EAER,OAAOE,KAAK;AAChB,CAAC;AAACD,EAAA,CAdIF,iBAAiB;AAgBvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}